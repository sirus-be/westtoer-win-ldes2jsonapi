orchestrator:
  pipelines:
    - name: wellknown_deletion
      description: "This pipeline deletes dangling wellknown URIs. The touristattractions pipeline only deletes zero level deep."
      input:
        name: Ldio:HttpInPoller
        config:
          url: http://database:8890/sparql/?default-graph-uri=http%3A%2F%2Fmu.semte.ch%2Fapplication&query=DELETE%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3FsWellknown%20%3FpWellknown%20%3FoWellknown%20.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20WHERE%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3FsWellknown%20%3FpWellknown%20%3FoWellknown%20.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20FILTER%20%28contains%28str%28%3FsWellknown%29%2C%20%22.well-known%2Fgenid%2F%22%29%29%0AFILTER%20NOT%20EXISTS%20%7B%0A%3Fs%20%3Fp%20%3FsWellknown%20.%0A%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0ALIMIT%201000
          cron: "0 */30 * * * *" # Every 30min 5000 dangling triples deleted
          continueOnFail: false
          retries:
            enabled: false
        adapter:
          name: Ldio:RdfAdapter
      outputs:
        - name: Ldio:ConsoleOut
    - name: touristattractions
      description: "This pipeline will take members from Westtoer LDES, and send to Virtuoso"
      input:
        name: Ldio:LdesClient
        config:
          urls:
            - https://ca-westtoerwin-nginx-prod.livelyisland-1fa58ea1.westeurope.azurecontainerapps.io/touristattractions
          sourceFormat: text/turtle
          keep-state: true
          state: sqlite
          materialisation:
            enabled: true
            enable-latest-state: true
          retries:
            enabled: true
            max: 15
            statuses-to-retry: 403, 404
      transformers:
        - name: Ldio:SparqlConstructTransformer
          config:
            query: |
              PREFIX prov: <http://www.w3.org/ns/prov#>
              PREFIX dcmitype: <http://purl.org/dc/dcmitype/>
              PREFIX schema: <https://schema.org/>

              CONSTRUCT {
                ?request <http://www.w3.org/2011/http#url> ?url .

                ?s ?p ?o .
              } WHERE {
                {
                  ?product a dcmitype:Collection .
                }
                UNION
                {
                  ?product a schema:TouristAttraction .
                }

                ?s ?p ?o .

                BIND(concat(
                "http://database:8890/sparql?query=", 
                  "PREFIX%20prov%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2Fns%2Fprov%23%3E%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20CONSTRUCT%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Fproduct%20%3Chttps%3A%2F%2Fsirus.be%2Fns%23latestGeneratedAtTime%3E%20%3FgeneratedAtTime%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20WHERE%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Fproduct%20prov%3AgeneratedAtTime%20%3FgeneratedAtTime%20.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20VALUES%20%3Fproduct%20%7B%20%3C",
                  encode_for_uri(str(?product)),
                  "%3E%20%7D%20%7D"
                ) as ?url)
                BIND(URI(?url) as ?request)
              }
        - name: Ldio:HttpEnricher
          config:
            adapter:
              name: Ldio:RdfAdapter
            url-property-path: <http://www.w3.org/2011/http#url>
            retries:
              enabled: true
              max: 10
              statuses-to-retry: 410,451,500,400
            rate-limit:
              enabled: true
              period: PT1M
              limit: 100
        - name: Ldio:SparqlConstructTransformer
          config:
            query: |
              PREFIX prov: <http://www.w3.org/ns/prov#>
              PREFIX dcmitype: <http://purl.org/dc/dcmitype/>
              PREFIX schema: <https://schema.org/>
              PREFIX sirus: <https://sirus.be/ns#>

              CONSTRUCT {
                ?s ?p ?o .
              } WHERE {
                {
                  ?product a dcmitype:Collection .
                }
                UNION
                {
                  ?product a schema:TouristAttraction .
                }
                ?product prov:generatedAtTime ?generatedAtTime .

                OPTIONAL { 
                  ?product sirus:latestGeneratedAtTime ?latestGeneratedAtTime .
                  FILTER (?generatedAtTime > ?latestGeneratedAtTime)
                }                       

                ?s ?p ?o .       
                FILTER (?p NOT IN (sirus:latestGeneratedAtTime))
              }
        - name: "Ldio:SparqlConstructTransformer"
          config:
            query: "
            PREFIX dcmitype: <http://purl.org/dc/dcmitype/>
            PREFIX schema: <https://schema.org/>
            PREFIX mu: <http://mu.semte.ch/vocabularies/core/>
            PREFIX generiek: <https://data.vlaanderen.be/ns/generiek#>
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX prov: <http://www.w3.org/ns/prov#>
            PREFIX locn: <http://www.w3.org/ns/locn#>
            PREFIX wgs84_pos: <http://www.w3.org/2003/01/geo/wgs84_pos#>
            PREFIX adres: <https://data.vlaanderen.be/ns/adres#>
            PREFIX westtoer: <https://data.westtoer.be/ns#>
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX logies: <https://data.vlaanderen.be/ns/logies#>
            PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
            PREFIX adms:  <http://www.w3.org/ns/adms#>
            PREFIX terms: <http://purl.org/dc/terms/>
            PREFIX foaf: <http://xmlns.com/foaf/0.1/>
            PREFIX datatourisme: <https://www.datatourisme.fr/ontology/core#>

            CONSTRUCT {
              ?product ?p ?oNotBlank .
              ?product mu:uuid ?uuidNoDatatype .
              ?product westtoer:verwerktVoorAfnemers ?generatedTimestamp .
              ?oNotBlank a ?finalType .
              ?oNotBlank ?p2 ?o2NotBlank .
              ?o2NotBlank ?p3 ?o3NotBlank .
              ?o3NotBlank ?p4 ?o4NotBlank .
              ?o4NotBlank ?p5 ?o5NotBlank .
              ?oNotBlank mu:uuid ?finalUuid .
              ?o2NotBlank mu:uuid ?finalUuidO2 .
              ?oNotBlank westtoer:identifier ?notationString .
              ?o2NotBlank schema:opens ?fixedOpens .
              ?o2NotBlank schema:closes ?fixedCloses .

            }
            WHERE {
              {
                ?product a dcmitype:Collection .
              }
              UNION
              {
                ?product a schema:TouristAttraction .
              }

              ?product ?p ?o .
              
              BIND(now() AS ?generatedTimestamp)
              

              OPTIONAL {
                ?o generiek:lokaleIdentificator ?uuidMediaRaw .
                BIND(CONCAT('uuid-',STR(?uuidMediaRaw)) AS ?uuidStatic)
              }

              OPTIONAL {
                ?o rdf:type logies:Faciliteit .
                ?o logies:isSpecialisatieVan ?faciliteitUrl .

                BIND(
                  CONCAT(
                    'uuid-',
                    MD5(CONCAT(
                      COALESCE(STR(?faciliteitUrl), '')
                    ))
                  )
                  AS ?uuidStatic
                )
              }

              OPTIONAL {
                ?o rdf:type adms:Identifier .
                ?o skos:notation       ?wincode .
                BIND(CONCAT('uuid-',STR(?wincode)) AS ?uuidStatic)
              }

              OPTIONAL {
                ?o rdf:type logies:Kwaliteitslabel .
                ?o skos:prefLabel ?kwalLabel .
                ?o schema:author ?kwalauthor .
                ?o terms:issued ?kwalissued .
                ?o terms:type ?kwaltype .

                BIND(
                  MD5(CONCAT(STR(?kwalLabel), STR(?kwalauthor), STR(?kwalissued), STR(?kwaltype)))
                  AS ?uuidStatic
                )
              }

              OPTIONAL {
                ?o rdf:type generiek:Geometrie.
                ?o wgs84_pos:lat ?geoLat .
                ?o wgs84_pos:long ?geoLong .
       

                BIND(
                  MD5(CONCAT(STR(?geoLat), STR(?geoLong)))
                  AS ?uuidStatic
                )
              }

              OPTIONAL {
                ?o rdf:type schema:QuantitativeValue.
                ?o schema:unitText ?qvUnitText .
                OPTIONAL{
                  ?o schema:value ?qvValue .
                }
                OPTIONAL {
                  ?o schema:unitCode ?qvCode .
                }
       
                BIND(
                  MD5(CONCAT(
                      COALESCE(STR(?qvUnitText), ''),
                      COALESCE(STR(?qvValue), ''),
                      COALESCE(STR(?qvCode), '')
                    )
                  )
                  AS ?uuidStatic
                )
              }

              OPTIONAL {
                ?o rdf:type schema:MonetaryAmount.
                ?o schema:currency ?MonCur .
                
                OPTIONAL{
                  ?o schema:value ?MonVal .
                }
  
                BIND(
                  
                  MD5(CONCAT(
                      COALESCE(STR(?MonCur), ''),
                      COALESCE(STR(?MonVal), '')
                    )
                  )
                  AS ?uuidStatic
                )
              }

              OPTIONAL {
                ?o rdf:type schema:ContactPoint .
                ?parent schema:contactPoint ?o .

                OPTIONAL { ?o foaf:page      ?contactPage    }
                OPTIONAL { ?o schema:email   ?contactEmail   }
                OPTIONAL { ?o schema:telephone ?contactTelephone }



                OPTIONAL {
                  {
                    SELECT ?o (GROUP_CONCAT(STR(?uuidStaticO2OpeningHours); SEPARATOR=', ') AS ?uuidStaticO2OpeningHoursCombined)
                    WHERE {
                      ?o schema:hoursAvailable ?o2 .
                      ?o2 rdf:type schema:OpeningHoursSpecification .
 
                      OPTIONAL{
                      ?o2 schema:opens ?opens .
                      }
                      OPTIONAL{
                      ?o2 schema:closes ?closes .
                      }
                      OPTIONAL{
                      ?o2 schema:validFrom ?validFrom .
                      }
                      OPTIONAL{
                      ?o2  schema:validThrough ?validThrough .
                      }
 
                      OPTIONAL {
                        ?o2 schema:dayOfWeek ?dow .
                        {
                          SELECT ?product ?o2 (GROUP_CONCAT(STR(?dow); SEPARATOR=', ') AS ?days)
                          WHERE {
                            ?product schema:contactPoint/schema:hoursAvailable ?o2 .
                            ?o2  rdf:type schema:OpeningHoursSpecification ;
                              schema:dayOfWeek ?dow .
                          }
                          GROUP BY ?product ?o2
                          ORDER BY ASC(?dow)
                        }
                        
                      }
 
                      BIND(
                        MD5(
                          CONCAT(
                            COALESCE(STR(?product), 'blank-product'),
                            COALESCE(STR(?opens), ''),
                            COALESCE(STR(?closes), ''),
                            COALESCE(STR(?validFrom), ''),
                            COALESCE(STR(?validThrough), ''),
                            COALESCE(MD5(STR(?days)), '')
                          )
                        )                   
                        
                        AS ?uuidStaticO2OpeningHours
                      )
                    }
                    GROUP  BY ?o 
                    ORDER BY ASC(?uuidStaticO2OpeningHours) 
                  }                  
                }

                BIND(
                  MD5(
                    CONCAT(
                      COALESCE(STR(?contactPage),'ContactPoint-o1'),
                      COALESCE(STR(?contactEmail), ''),
                      COALESCE(STR(?contactTelephone),''),
                      COALESCE(STR(?parent),'empty-product-o1'),
                      COALESCE(MD5(STR(?openinghoursConcat)), '')
                      
                    )
                  )
                  
                  AS ?uuidStatic
                )
              }

              OPTIONAL{
                ?o rdf:type logies:Registratie.
                ?o adms:identifier ?regId .
                ?o prov:wasAssociatedWith ?regAssoc .
                ?regId skos:notation ?regNotation .
                

                BIND(
                  
                    MD5(CONCAT(
                      COALESCE(STR(?regNotation), 'Registratie'),
                      COALESCE(STR(?regAssoc),'')
                    )
                  )
                  AS ?uuidStatic
                )              
              }

              OPTIONAL{
                ?o rdf:type locn:Address.
                ?o westtoer:adresregel1 ?adresregel1 .
                ?o locn:postCode ?postcode .
                ?o westtoer:gemeenteniscode ?gemeenteniscode .

                OPTIONAL{
                  ?o westtoer:isToegekendDoorDeelgemeente ?deelgemeente .
                }

                OPTIONAL{
                  ?o westtoer:isToegekendDoorGemeente ?gemeente .
                }

                OPTIONAL{
                  ?o westtoer:isToegekendDoorProvincie ?provincie .
                }
                
                BIND(
                  
                    MD5(CONCAT(
                      COALESCE(STR(?adresregel1), 'Address'),
                      COALESCE(STR(?postcode), ''),
                      COALESCE(STR(?gemeenteniscode), ''),
                      COALESCE(STR(?deelgemeente), ''),
                      COALESCE(STR(?gemeente), ''),
                      COALESCE(STR(?provincie), '')
                    )
                  )
                  AS ?uuidStatic
                )
              }

              OPTIONAL{
                ?o rdf:type schema:Rating.
                ?o schema:author ?ratingAuthor .
                ?o schema:ratingValue ?ratingValue .
                ?o schema:description ?ratingDescription .
                OPTIONAL{
                  ?o schema:bestRating ?ratingBest .
                }
                OPTIONAL{
                  ?o schema:worstRating ?ratingWorst .
                }
                
                BIND(
                  
                    MD5(CONCAT(
                      COALESCE(STR(?ratingAuthor), ''),
                      COALESCE(STR(?ratingValue), ''),
                      COALESCE(STR(?ratingDescription), ''),
                      COALESCE(STR(?ratingBest), ''),
                      COALESCE(STR(?ratingWorst), '')
                    )
                  )
                  AS ?uuidStatic
                )
              }

              OPTIONAL{
                ?o rdf:type datatourisme:MultiPurposeRoomOrCommunityRoom.

                OPTIONAL{
                  ?o westtoer:aantalSubzalen ?aantalSubzalen .
                }

                ?o schema:floorSize ?floorSize .
                ?o schema:height ?height .

                OPTIONAL{
                  ?floorSize schema:unitCode ?floorSizeUnitCode .
                  ?floorSize schema:unitText ?floorSizeUnitText .

                  OPTIONAL{
                    ?floorSize schema:value ?floorSizeValue .
                  }
                }
               
                OPTIONAL{
                  ?height schema:unitCode ?heightUnitCode .
                  ?height schema:unitText ?heightUnitText .

                  OPTIONAL{
                    ?height schema:value ?heightValue .
                  }
                }

                BIND(
                  
                    MD5(CONCAT(
                      COALESCE(STR(?aantalSubzalen), ''),
                      COALESCE(STR(?floorSizeUnitCode), ''),
                      COALESCE(STR(?floorSizeUnitText), ''),
                      COALESCE(STR(?floorSizeValue), ''),
                      COALESCE(STR(?heightUnitCode), ''),
                      COALESCE(STR(?heightUnitText), ''),
                      COALESCE(STR(?heightValue), '')
                    )
                  )
                  AS ?uuidStatic
                )
              }

              OPTIONAL {
                ?o rdf:type ?typeO .
                BIND(STRUUID() AS ?uuidGenerated)
                FILTER NOT EXISTS {
                  ?o rdf:type logies:ToeristischeRegio .
                }
              }

              OPTIONAL {
                FILTER(?p = rdfs:seeAlso)
                BIND(rdfs:Resource AS ?typeSeeAlso)

                OPTIONAL {
                  ?o schema:url ?resourceUrl .
                }

                ?o schema:additionalType ?resourceAddType .
                BIND(REPLACE(STR(?resourceAddType), '.*/', '') AS ?resourceAddTypeId)
 
                BIND(
                    CONCAT(
                    COALESCE(STR(?resourceAddTypeId), ''),
                      '/',
                      md5(COALESCE(STR(?resourceUrl), ''))
                    )
                  AS ?uuidStatic
                )
                
              }       
              
              BIND(COALESCE(?uuidStatic, ?uuidGenerated) AS ?finalUuid)
              BIND(COALESCE(?typeO, ?typeSeeAlso) AS ?finalType)

              OPTIONAL {
                ?o ?p2 ?o2 .
                FILTER NOT EXISTS {
                  ?o rdf:type logies:ToeristischeRegio .
                }

                OPTIONAL {
                  ?product schema:contactPoint/schema:hoursAvailable ?o2 .
                  ?o2 rdf:type schema:OpeningHoursSpecification .

                  OPTIONAL{
                  ?o2 schema:opens ?opens .
                  }
                  OPTIONAL{
                  ?o2 schema:closes ?closes .
                  }
                  OPTIONAL{
                  ?o2 schema:validFrom ?validFrom .
                  }
                  OPTIONAL{
                  ?o2  schema:validThrough ?validThrough .
                  }

                  OPTIONAL {
                    ?o2 schema:dayOfWeek ?dow .
                    {
                      SELECT ?product ?o2 (GROUP_CONCAT(STR(?dow); SEPARATOR=', ') AS ?days)
                      WHERE {
                        ?product schema:contactPoint/schema:hoursAvailable ?o2 .
                        ?o2  rdf:type schema:OpeningHoursSpecification ;
                          schema:dayOfWeek ?dow .
                      }
                      GROUP BY ?product ?o2
                      ORDER BY ASC(?dow)
                    }
                  }

                  BIND(
                    MD5(
                      CONCAT(
                        COALESCE(STR(?product), 'blank-product'),
                        COALESCE(STR(?opens), ''),
                        COALESCE(STR(?closes), ''),
                        COALESCE(STR(?validFrom), ''),
                        COALESCE(STR(?validThrough), ''),
                        COALESCE(MD5(STR(?days)), '')
                      )
                    )                   
                    
                    AS ?uuidStaticO2OpeningHours
                  )
                             
                }

                OPTIONAL {
                  ?o2 rdf:type datatourisme:RoomLayout .
                  OPTIONAL{
                    ?o2 westtoer:indelingBeschikbaar ?layoutIndelingBeschikbaar .
                  }
                  OPTIONAL{
                    ?o2 logies:capaciteit ?layoutCapaciteit .
                    OPTIONAL{      
                      ?layoutCapaciteit schema:unitText ?layoutCapaciteitText .
                        OPTIONAL{
                          ?layoutCapaciteit schema:unitCode ?layoutCapaciteitCode .
                        }
                        OPTIONAL{
                          ?layoutCapaciteit schema:value ?layoutCapaciteitValue .
                          }
                        }
                    }
                  
                    BIND(
                      
                        MD5(CONCAT(
                          COALESCE(STR(?layoutIndelingBeschikbaar), ''),
                          COALESCE(STR(?layoutCapaciteitText), ''),
                          COALESCE(STR(?layoutCapaciteitCode), ''),
                          COALESCE(STR(?layoutCapaciteitValue), '')
                        )
                      )
                      AS ?uuidStaticO2layout
                    )
                }

                OPTIONAL {
                  ?o2 rdf:type schema:ContactPoint.

                  OPTIONAL {
                    ?o2 foaf:page ?contactPageO2 .
                  }
                  OPTIONAL {
                    ?o2 schema:email ?contactEmailO2 .
                  }
                  OPTIONAL {
                    ?o2 schema:telephone ?contactTelephoneO2 .
                  }
    
                  BIND(
                    
                      MD5(CONCAT(
                        STR('ContactPoint-o2'),
                        COALESCE(STR(?contactPageO2), 'ContactPoint-o2'),
                        COALESCE(STR(?contactEmailO2), ''),
                        COALESCE(STR(?contactTelephoneO2), ''),
                        COALESCE(STR(?product), 'empty-product-o2')
                      )
                    )
                    AS ?uuidStaticO2ContactPoint
                  )
                }

                OPTIONAL {
                    ?o2 rdf:type ?typeO2 .
                    BIND(CONCAT('random-02-',STRUUID()) AS ?uuidGeneratedO2)
                }

                BIND(COALESCE(?uuidStaticO2OpeningHours, ?uuidStaticO2layout, ?uuidStaticO2ContactPoint, ?uuidGeneratedO2) AS ?finalUuidO2)

                

                OPTIONAL {
                  ?o2 ?p3 ?o3 .

                  FILTER (?p3 != <https://schema.org/opens>)
                  FILTER (?p3 != <https://schema.org/closes>)

                  OPTIONAL {
                    ?o2 schema:opens ?opens .
                    ?o2 schema:closes ?closes .
                    BIND(str(?opens) as ?fixedOpens)
                    BIND(str(?closes) as ?fixedCloses)

                  }



                  OPTIONAL {
                    ?o3 ?p4 ?o4 .
                    OPTIONAL {
                        ?o4 ?p5 ?o5 .
                    }
                  }
                }
              }

              OPTIONAL {
                ?product generiek:lokaleIdentificator ?uuid .
                BIND(STR(?uuid) AS ?uuidNoDatatype)
              }

              OPTIONAL {
                ?o skos:notation ?notation .
                BIND(STR(?notation) AS ?notationString)
              }


              BIND('https://data.westtoer.be/id/.well-known/genid/' AS ?skolemBase)
              BIND(if(isBlank(?o) && !isLiteral(?o), URI(concat(?skolemBase, ?finalUuid)), ?o) AS ?oNotBlank)
              BIND(if(isBlank(?o2) && !isLiteral(?o2), URI(concat(?skolemBase, ?finalUuidO2)), ?o2) AS ?o2NotBlank)
              BIND(if(isBlank(?o3) && !isLiteral(?o3), URI(concat(?skolemBase, md5(concat(str(?product), str(?o3))))), ?o3) AS ?o3NotBlank)
              BIND(if(isBlank(?o4) && !isLiteral(?o4), URI(concat(?skolemBase, md5(concat(str(?product), str(?o4))))), ?o4) AS ?o4NotBlank)
              BIND(IF(ISBLANK(?o5) && !ISLITERAL(?o5), URI(CONCAT(?skolemBase, MD5(CONCAT(STR(?product), STR(?o5))))), ?o5) AS ?o5NotBlank)
              }
            "
       
        - name: "Ldio:SparqlConstructTransformer"
          config:
            query: "
            PREFIX logies: <https://data.vlaanderen.be/ns/logies#>
            PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

            CONSTRUCT {
              GRAPH ?s {
                ?s ?p ?o .
              }
            }
            WHERE {
              ?s ?p ?o .
              FILTER NOT EXISTS {
                ?s a skos:Concept .
              }
              FILTER NOT EXISTS {
                ?s skos:prefLabel ?o .
              }
              FILTER NOT EXISTS {
                ?s a logies:ToeristischeRegio .
              }               
            }
            "

      outputs:
        # - name: Ldio:ConsoleOut
        #   config:
        #     rdf-writer:
        #       content-type: application/n-quads
        - name: Ldio:HttpSparqlOut
          config:
            endpoint: http://database:8890/sparql
            repository-id: virtuoso
            graph: http://mu.semte.ch/application
            replacement:
              enabled: true
              depth: 0
            retries:
              enabled: true
              max: 15
              statuses-to-retry: 400, 403, 404
            rate-limit:
              enabled: true
              limit: 10000
              period: PT1M
    - name: taxonomies
      description: "This pipeline will fetch the product types and tree taxonomies."
      input:
        name: Ldio:HttpInPoller
        config:
          url:
            - https://app-westtoerwin-prod.azurewebsites.net/api/v1/taxonomies/tree
          cron: "*/60 * * * * *"
        adapter:
          name: Ldio:JsonToLdAdapter
          config:
            context: |
              {
                "@context": {
                  "@base": "https://data.westtoer.be/id/concepts/",
                  "id": "@id",
                  "skos": "http://www.w3.org/2004/02/skos/core#",
                  "label": {
                      "@id": "skos:prefLabel",
                      "@language": "nl"
                  },
                  "items": "skos:narrower",
                  "labelDutch": {
                      "@id": "label",
                      "@language": "nl"
                  },
                  "labelEnglish": {
                      "@id": "label",
                      "@language": "en"
                  },
                  "labelFrench": {
                      "@id": "label",
                      "@language": "fr"
                  },
                  "labelGerman": {
                      "@id": "label",
                      "@language": "de"
                  },
                  "isDeleted": {
                      "@id": "https://data.westtoer.be/ns#isDeleted",
                      "@type": "http://www.w3.org/2001/XMLSchema#boolean"
                  }
                }
              }
      transformers:
        - name: "Ldio:SparqlConstructTransformer"
          config:
            query: "
              PREFIX skos: <http://www.w3.org/2004/02/skos/core#>  
              PREFIX mu: <http://mu.semte.ch/vocabularies/core/>  
              PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>  
 
              CONSTRUCT {  
                graph ?object {
                  ?object a skos:Concept .  
                  ?object mu:uuid ?uuid .  
                  ?object ?p ?o .  
                }
              }  
              WHERE {  
                ?object ?p ?o .  
                FILTER NOT EXISTS { ?object mu:uuid ?existingUuid }  
                BIND(CONCAT('uuid-', SHA256(STR(?object))) AS ?uuid)  
 
              }
            "
      outputs:
        # - name: Ldio:ConsoleOut
        - name: Ldio:HttpSparqlOut
          config:
            endpoint: http://database:8890/sparql
            repository-id: virtuoso
            graph: http://mu.semte.ch/application
            replacement:
              enabled: true
              depth: 0
            retries:
              enabled: true
              max: 15
              statuses-to-retry: 400, 403, 404
            rate-limit:
              enabled: true
              limit: 10000
              period: PT1M
    - name: producttypes
      description: "This pipeline will fetch the product types."
      input:
        name: Ldio:HttpInPoller
        config:
          url:
            - https://app-westtoerwin-prod.azurewebsites.net/api/v1/taxonomies/product-types
          cron: "*/60 * * * * *"
        adapter:
          name: Ldio:JsonToLdAdapter
          config:
            context: |
              {
                "@context": {
                  "@base": "https://data.westtoer.be/id/concept/producttype/",
                  "id": "@id",
                  "skos": "http://www.w3.org/2004/02/skos/core#",
                  "labels": "skos:prefLabel",
                  "taal": "@language",
                  "children": "skos:narrower"
                }
              }
      transformers:
        - name: "Ldio:SparqlConstructTransformer"
          config:
            query: "
              PREFIX skos: <http://www.w3.org/2004/02/skos/core#>  
              PREFIX mu: <http://mu.semte.ch/vocabularies/core/>  
              PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>  
 
              CONSTRUCT {  
                graph ?object {
                  ?object a skos:Concept .  
                  ?object mu:uuid ?uuid .  
                  ?object ?p ?o .  
                }
              }  
              WHERE {  
                ?object ?p ?o .  
                BIND(REPLACE(STR(?object), '.*/', '') AS ?uuid)
              }
            "
      outputs:
        # - name: Ldio:ConsoleOut
        - name: Ldio:HttpSparqlOut
          config:
            endpoint: http://database:8890/sparql
            repository-id: virtuoso
            graph: http://mu.semte.ch/application
            replacement:
              enabled: true
              depth: 0
            retries:
              enabled: true
              max: 15
              statuses-to-retry: 400, 403, 404
            rate-limit:
              enabled: true
              limit: 10000
              period: PT1M
    - name: municipalities
      description: "This pipeline will fetch the municipalities."
      input:
        name: Ldio:HttpInPoller
        config:
          url:
            - https://app-westtoerwin-prod.azurewebsites.net/api/v1/municipalities
          cron: "*/60 * * * * *"
        adapter:
          name: Ldio:JsonToLdAdapter
          config:
            context: |
              {
                "@context": {
                  "@base": "https://data.westtoer.be/id/concepts/",
                  "id": "@id",
                  "skos": "http://www.w3.org/2004/02/skos/core#",
                  "locn": "http://www.w3.org/ns/locn#",
                  "label": {
                      "@id": "skos:prefLabel",
                      "@language": "nl"
                  },
                  "subMunicipalities": "skos:narrower",
                  "postalCode": {
                      "@id": "locn:postCode"
                  }
                }
              }
      transformers:
        - name: "Ldio:SparqlConstructTransformer"
          config:
            query: "
              PREFIX skos: <http://www.w3.org/2004/02/skos/core#>  
              PREFIX mu: <http://mu.semte.ch/vocabularies/core/>  
              PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>  
 
              CONSTRUCT {  
                graph ?object {
                  ?object a skos:Concept .  
                  ?object mu:uuid ?uuid .  
                  ?object ?p ?o .  
                }
              }  
              WHERE {  
                ?object ?p ?o .  
                FILTER NOT EXISTS { ?object mu:uuid ?existingUuid }  
                BIND(CONCAT('uuid-', SHA256(STR(?object))) AS ?uuid)  
 
              }
            "
      outputs:
        # - name: Ldio:ConsoleOut
        - name: Ldio:HttpSparqlOut
          config:
            endpoint: http://database:8890/sparql
            repository-id: virtuoso
            graph: http://mu.semte.ch/application
            replacement:
              enabled: true
              depth: 0
            retries:
              enabled: true
              max: 15
              statuses-to-retry: 400, 403, 404
            rate-limit:
              enabled: true
              limit: 10000
              period: PT1M
    - name: touristregions
      description: "This pipeline will fetch the tourist-regions."
      input:
        name: Ldio:HttpInPoller
        config:
          url:
            - https://sirus-be.github.io/westtoer-win-ldes2triplestore/taxonomies/toeristische-regios.jsonld

          cron: "*/60 * * * * *"
        adapter:
            name: Ldio:RdfAdapter
      transformers:
        - name: "Ldio:SparqlConstructTransformer"
          config:
            query: "
              PREFIX skos: <http://www.w3.org/2004/02/skos/core#>  
              PREFIX mu: <http://mu.semte.ch/vocabularies/core/>  
              PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>  
 
              CONSTRUCT {  
                graph ?object {
                  ?object a skos:Concept .  
                  ?object mu:uuid ?uuid .  
                  ?object ?p ?o .  
                }
              }  
              WHERE {  
                ?object ?p ?o .  
                FILTER NOT EXISTS { ?object mu:uuid ?existingUuid }  
                BIND(CONCAT('uuid-', SHA256(STR(?object))) AS ?uuid)  
 
              }
            "
      outputs:
        # - name: Ldio:ConsoleOut
        - name: Ldio:HttpSparqlOut
          config:
            endpoint: http://database:8890/sparql
            repository-id: virtuoso
            graph: http://mu.semte.ch/application
            replacement:
              enabled: true
              depth: 0
            retries:
              enabled: true
              max: 15
              statuses-to-retry: 400, 403, 404
            rate-limit:
              enabled: true
              limit: 10000
              period: PT1M
    - name: daysofweek
      description: "This pipeline will fetch the weekdays."
      input:
        name: Ldio:HttpInPoller
        config:
          url:
            - https://sirus-be.github.io/westtoer-win-ldes2jsonapi/taxonomies/days-of-week.jsonld

          cron: "*/60 * * * * *"
        adapter:
            name: Ldio:RdfAdapter
      transformers:
        - name: "Ldio:SparqlConstructTransformer"
          config:
            query: "
              PREFIX skos: <http://www.w3.org/2004/02/skos/core#>  
              PREFIX mu: <http://mu.semte.ch/vocabularies/core/>  
              PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>  
 
              CONSTRUCT {  
                graph ?object {
                  ?object a skos:Concept .  
                  ?object mu:uuid ?uuid .  
                  ?object ?p ?o . 
                }
              }  
              WHERE {  
                ?object ?p ?o .  
                FILTER NOT EXISTS { ?object mu:uuid ?existingUuid }  
                BIND(CONCAT('uuid-', SHA256(STR(?object))) AS ?uuid) 
             
 
              }
            "
      outputs:
        # - name: Ldio:ConsoleOut
        - name: Ldio:HttpSparqlOut
          config:
            endpoint: http://database:8890/sparql
            repository-id: virtuoso
            graph: http://mu.semte.ch/application
            replacement:
              enabled: true
              depth: 0
            retries:
              enabled: true
              max: 15
              statuses-to-retry: 400, 403, 404
            rate-limit:
              enabled: true
              limit: 10000
              period: PT1M